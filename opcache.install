<?php

/**
 * @file
 * Contains installation-related hooks for OPcache.
 */

/**
 * Implements hook_requirements().
 */
function opcache_requirements($phase) {
  $requirements = array();

  if ($phase == 'install' || $phase == 'runtime') {
    // In the "Install" phase, t() may not be available
    $t = get_t();
    if (!extension_loaded('Zend OPcache')) {
      $requirements['opcache_not_installed'] = array(
        'title' => $t('Zend OPcache extension not installed.'),
        'value' => '',
        'description' => $t('Zend OPcache PHP extension is not installed.'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $config = opcache_get_configuration();
      if (!$config['directives']['opcache.enable']) {
        $requirements['opcache_not_enabled'] = array(
          'title' => $t('Zend OPcache extension not enabled.'),
          'value' => $config['version']['version'],
          'description' => $t('Zend OPcache PHP extension is installed. However, it is not enabled. Check that <tt>opcache.enable = 0</tt> has not been added to this PHP installation&rsquo;s configuration file (you may need to manually add <tt>opcache.enable = 1</tt>).'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      else {
        $configuration = new OPCacheConfiguration();
        $directives = $configuration->checkDirectives();
        if (empty($directives['messages'])) {
          $directives['messages'][] = $t('All is well.');
        }
        $advisories = theme('item_list', array('items' => $directives['messages'], 'title' => $t('Advisories')));
        $requirements['opcache_enabled'] = array(
          'title' => $t('OPcache is enabled.'),
          'value' => $config['version']['version'],
          'description' => $advisories,
          'severity' => $directives['severity'],
        );
      }
    }
  }

  return $requirements;
}
